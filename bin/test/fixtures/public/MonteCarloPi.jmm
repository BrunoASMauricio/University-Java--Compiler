import static MathUtils.random(int,int) int; //lowerLimit,upperLimit
import static ioPlus.requestNumber() int;
import static ioPlus.printResult(int) void;
class MonteCarloPi {
	public boolean performSingleEstimate() {
		int rand1;
		int rand2;
		boolean in_circle;
		int squareDist;

		rand1 = MathUtils.random(0-100, 100);
		rand2 = MathUtils.random(0-100, 100);

		squareDist = (rand1 * rand1 + rand2 * rand2) / 100;
		if (squareDist < 100) {
			in_circle = true;
		} else {
			in_circle = false;
		}

		return in_circle;
	}

	public int estimatePi100(int n) {
		int samples_in_circle;
		int samples_so_far;
		int pi_estimate;
		//this.estimatePi100().func1(1+1+1, 5*5*5)[2+2+2].var1.func2(3+3+3);
		//this.estimatePi100.length.length;

		samples_so_far = 0;
		samples_in_circle = 0;

		while (samples_so_far < n) {
			if (this.performSingleEstimate()) {
				samples_in_circle = samples_in_circle + 1;
			} else {
			}
			samples_so_far = samples_so_far + 1;
		}
		/*if(!(samples_in_circle.add(1+4))+1*4+5){
		}else{
		}*/
		pi_estimate = 400 * samples_in_circle / n;
		return pi_estimate;
	}

	public static void main(String[] args) {
		int pi_estimate_times_100;
		int num_samples;

		num_samples = ioPlus.requestNumber();
		//pi_estimate_times_100 = new MonteCarloPi().estimatePi100(num_samples);

		ioPlus.printResult(pi_estimate_times_100);
	}
}
