options {
LOOKAHEAD=1;
//Store tockens in the SimpleNode
TRACK_TOKENS=true;
}
/*
Example build command
echo "TREE"; jjtree Comp.jjt; echo "CC"; javacc Comp.jj; echo "JAVA"; javac *.java; cat ./testbed/fulltest_1 | java Comp
*/
PARSER_BEGIN(JMMParser)

import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;

public class JMMParser{
    
    static List<ParseException> all_exceptions = new ArrayList<ParseException>();
    static int MAX_EXCEPTIONS = 5;
    
    static SimpleNode parse(InputStream input_stream) throws Exception{
        SimpleNode root = null;
        all_exceptions.clear();
        JMMParser MainProg = new JMMParser(input_stream);

        System.out.println("Parser starting");

        try{
            root = MainProg.Program();
            
        }catch(ParseException e){
            System.out.println("UNEXPECTED Parsing Exception");
            printParsingException(e);
            throw new Exception("Parser failure");
        }catch(Exception e){
            System.out.println("Non parse exception ocured: ");
            System.out.println(e);
            throw new Exception("Parser failure");
        }
        if(all_exceptions.size() != 0){
            for(ParseException parse_ex: all_exceptions){
                printParsingException(parse_ex);
            }
            throw new Exception("Parser failure");
            //return null;
        }
        return root;
    }

    //https://github.com/javacc/javacc/blob/master/src/main/resources/templates/Token.template
    //https://github.com/javacc/javacc/blob/master/src/main/resources/templates/ParseException.template
    static void printParsingException(ParseException e){
        System.out.println("PARSING ERROR");
        //If this object has been created due to a parse error, the token following this token (currentToken) will (therefore) be the first error token.
        System.out.println("Unexpected symbol encountered: "+e.currentToken.next.image+" on line "+e.currentToken.beginLine+", column "+e.currentToken.beginColumn);
        System.out.println("Was expecting one of the following symbols:");

        StringBuffer expected = new StringBuffer();
        expected.append("[ ");

        for(int i = 0; i < e.expectedTokenSequences.length-2; i++){
            expected.append(tokenImage[e.expectedTokenSequences[i][0]]).append(", ");
        }
        if(e.expectedTokenSequences.length > 0){
            expected.append(tokenImage[e.expectedTokenSequences[e.expectedTokenSequences.length-1][0]]).append(" ");
        }
        expected.append(" ]\n");
        
        if(e.expectedTokenSequences.length == 0){
            System.out.println("Nothing, THIS SHOULD BE UNREACHABLE?");
        }else{
            System.out.println(expected+"");
        }
    }
    
    static int eval(SimpleNode node, int depth) {
        SimpleNode lhs;
        SimpleNode rhs;
        int n_children;

        for(int i = 0; i < depth; i++){
            System.out.print("  ");
        }
        
        System.out.print(depth+" ");
        
        switch(node.id){
            case JMMParserTreeConstants.JJTIDENTIFIER:
                System.out.println("[ID: "+node.image+"] ");
                break;
            
            case JMMParserTreeConstants.JJTTYPE:
                System.out.println("[Type: "+node.image+"] ");
                break;
            
            case JMMParserTreeConstants.JJTINTCONST:
                System.out.println("[Int Constant: "+node.int_val+"] ");
                break;
            
            case JMMParserTreeConstants.JJTBOOLCONST:
                System.out.println("[Boolean Constant: "+node.bool_val+"] ");
                break;
            
            default:
                System.out.println(JMMParserTreeConstants.jjtNodeName[node.id]);
        }

        n_children = node.jjtGetNumChildren();
        
        for(int i = 0; i < n_children; i++){
            lhs = (SimpleNode) node.jjtGetChild(i);
            eval(lhs, depth+1);
        }
        
        return 0;
    }
}
PARSER_END(JMMParser)
SKIP :
{
//Eventually when we handle string parsing, remove these from here
" "
|"\r"
|"\r\n"
|"\n\r"
|"\t"
|"\n"
//Ignore comments

|< "/*" (~["*"])* "*" ( ~["*","/"] (~["*"])* "*" | "*" )* "/" >
|< "//" (~["\n"])+ ("\n" | "\r" | "\r\n") >

}
/*
GENERAL RULE, TOKENS THAT INCLUDE EACHOTHER (in is included by int) MUST ALWAYS APPEAR
SHORTEST TOKEN FIRST
i.e.
>in
>int
and NOT
>int
>i

TODO
Accept hex/bin number notation

The used operator precedence logic:

D -> D && C | C
C -> C < E | E
E -> E ( + | - ) T | T
T -> T ( * | / ) F | F
F -> Terminal

Removing left-recursion

D -> C D1
D1 -> && C D1 | e

C -> E C1
C1 -> < E C1 | e

E -> T E1
E1 -> ( + | - ) T E1 | e

T -> F T1
T1 -> ( * | / ) F T1 | e

F -> Terminal

*/
TOKEN:
{

< INTEGER: (["0"-"9"])+ >

|< SC: ";" >
|< NEW: "new" >
|< OP: "(" >
|< CP: ")" >
|< OSB: "[" >
|< CSB: "]" >
|< OB: "{" >
|< CB: "}" >

|< NOT: "!" >
|< ADD: "+" >
|< SUB: "-" >
|< MUL: "*" >
|< DIV: "/" >
|< LESSTHAN: "<" >
|< AND: "&&" >
|< EQ: "=" >
|< SELECTOR: "." >
|< SEPARATOR: "," >

|< THIS: "this" >
|< IF: "if" >
|< ELSE: "else" >
|< WHILE: "while" >
|< RETURN: "return" >

|< BOOL: "true" | "false" >
|< BOOLEAN: "boolean" >
|< INT: "int" >

|< STRING: "String" >
|< LENGTH: "length" >
|< IMPORT: "import" >
|< EXTENDS: "extends" >
|< PUBLIC: "public" >
|< VOID: "void" >
|< MAIN: "main" >
|< STATIC: "static" >
|< CLASS: "class" >
|
// ID MUST ALWAYS BE THE LAST TOKEN BECAUSE OTHERWISE IT WILL BE MATCH EVERY STRING
< ID: ["a"-"z","A"-"Z","_","$"] ( ["a"-"z","A"-"Z","$","_","0"-"9"] )* >
}

SimpleNode Program() #START: {}
{
    (
        ( ImportDeclaration() )* ClassDeclaration() <EOF>
    ) {return jjtThis;}
}
/*
void Import(): {Token t;}{
    <import> [<static> jjtThis.isStatic=true;]
    t=<IDENTIFIER>{jjtThis.className=t.image;}
    [<DOT> t=<Identifier> {jjtThis.methodName=t.image}]
    [<LB> ParamList() <RB> [Type()|<VOID>#Void] ]
}
void ParamList(): {
    [Type()  (<COMMA> Type())*]
}
*/
void ImportDeclaration(): {}
{
    //The method node is necessary to know if it's a method or no (since there can be a method with 0 arguments and no return (void))
    <IMPORT> ( <STATIC> #STATIC(0) )? Identifier() ( <SELECTOR> Identifier() )?
    //The grammar should only accept methods, but this is here just to check if there is any non method import
    //The exception is throwned in the semantic
    ( <OP> #IMPORTMETHOD(0) ( (Type() ( <SEPARATOR> Type() )*) | <VOID> )? <CP> )?
    ( <VOID> | Type() #RETURN  )? <SC>
}

void VarDeclaration(): {}
{
    Type() Identifier() <SC>
}

void ClassHead(): {}
{
    Identifier() ( <EXTENDS> Identifier() )?
}

void ClassDeclaration(): {}
{
    <CLASS> ClassHead() <OB>
        ( VarDeclaration() )*
        ( MethodDeclaration() )*
        
    <CB>
}

void MethodHead(): {}
{
    //Return is unnecessary here because the first token MUST be a Type, and is always the return type
    //First token is return type, Second token is method name
    //From then on, Type Identifier pairs are the arguments 
    Type() /* #RETURN */ Identifier() <OP> ( (Type() Identifier() ( <SEPARATOR> Type() Identifier() )* ) | <VOID> )?
}

void MainMethod(): {}
{
    <STATIC> <VOID> <MAIN> <OP>
        <STRING> <OSB> <CSB> Identifier()
    <CP> <OB>
    ( LOOKAHEAD(2) VarDeclaration() )*
    ( Statement() )*
    <CB>
}

void NormalMethod(): {}
{
    MethodHead()
    <CP> <OB>
        ( LOOKAHEAD(2) VarDeclaration() )*
        ( Statement() )*
        ( <RETURN> Expression() #RETURN <SC> )?
    <CB>
}

void MethodDeclaration()#void: {}
{
    <PUBLIC>
        (
        NormalMethod()
        |
        MainMethod()
        )
}

void BoolConst(): {Token t;}
{
    t=<BOOL>{
        jjtThis.bool_val = Boolean.parseBoolean(t.image);
    }
}
void IntConst(): {Token t;}
{
    t=<INTEGER>{
        jjtThis.int_val = Integer.parseInt(t.image);
    }
}

void And()#void:{}
{
    Lessthan() And1()
}

void And1()#void: {}
{
    "&&" Lessthan() #AND(2) And1()
    |
    Empty()
}

void Lessthan()#void: {}
{
    Add() Lessthan1()
}

void Lessthan1()#void: {}
{
    "<" Add() #LESSTHAN(2) Lessthan1()
    |
    Empty()
}

void Add()#void: {}
{
    Mul() Add1()
}

void Add1()#void: {}
{
    (
        "+" Mul() #ADD(2)
        |
        "-" Mul()  #SUB(2))
     Add1()
    |
    Empty()
}

void Mul()#void: {}
{
    Node() Mul1()
}

void Mul1()#void: {}
{
    (
        "*" Node() #MUL(2)
        |
        "/" Node() #DIV(2)
    ) Mul1()
    |
    Empty()
}

void SelectorArguments(): {}
{
    <OP> ( Expression() ( <SEPARATOR> Expression() )* )? <CP>
}

void Selector_1()#SELECTOR: {}
{
    Identifier() ( SelectorArguments() )?
    |
    <LENGTH> #LENGTH
}

void Selector()#void: {}
{
    <SELECTOR> Selector_1()
    |
    ArrayAccess()
}

void IdentifierAccess():{}
{
    Identifier() ( SelectorArguments() )? ( Selector() )*
}

void This()#THIS: {}
{
    <THIS> ( Selector() )*
}

void New(): {}
{
    <INT> <OSB> Expression() <CSB>
    |
    Identifier() <OP> #SELECTORARGUMENTS <CP> ( Selector() )*
}

void Negate(): {}
{
    <NOT> Expression()
}

void Node()#void: {}
{
    IntConst()
    |
    BoolConst()
    |
    IdentifierAccess()
    |
    <OP> And() <CP>
    |
    This()
    |
    <NEW> New()
    |
    Negate()

}

void Expression()#void: {}
{
    And()
}


//Access here is unnecessary because the First Token is always the target ID
//More tokens imply an expression that can then be computed
void ArrayAccess():{} //#void /* #Access */: {}
{
    <OSB> Expression() <CSB>
}

void Target()#Target: {}
{
    Identifier() ( ArrayAccess() )?
}
void Attribution()#Attribution: {}
{
    Target() <EQ> Expression() <SC>
}

void Statement()#void: {}
{
    IfStructure()
    |
    WhileStructure()
    |
    <OB> ( Statement() )* <CB>
    |
    LOOKAHEAD(2)
    Attribution()
    |
    Expression() #DIRECTEXPRESSION <SC>
}

void IfHead(): {}
{
    Expression()
}

void IfStructure(): {}
{
    <IF> <OP> IfHead()  <CP> Statement() ElseStructure()
}

void ElseStructure(): {}
{
    <ELSE> Statement()
}

//Needed because expressions inside the while body would be confused with those inside the head
void WhileHead(): {}
{
    Expression()
}

void WhileStructure(): {}
{
    <WHILE>
    try{
        <OP> WhileHead() <CP> Statement()
    }catch (ParseException e) {
        System.out.println("COULD NOT PARSE WHILE");
        error_skipto(CB, e);
    }
}

void Type(): {Token t;}
{
    <INT> (
        <OSB> <CSB>{
            jjtThis.image = "int[]";
        }
        |
        Empty(){
            jjtThis.image = "int";
        }
        )
    |
    <STRING> (
        <OSB> <CSB>{
            jjtThis.image = "String[]";
        }
        |
        Empty(){
            jjtThis.image = "String";
        }
        )
    |
    <BOOLEAN>{
        jjtThis.image = "boolean";
    }
    |
    t=<ID>{
        jjtThis.image = t.image+"";
    }
}

void Empty()#void: {}
{
    {}
}

void Identifier(): {Token t;}
{
    t=<ID>{
        jjtThis.image = t.image+"";
    }
}

JAVACODE
//Addapted from https://javacc.github.io/javacc/tutorials/error-handling.html
void error_skipto(int kind, ParseException e) throws Exception{
    if(all_exceptions.size() == MAX_EXCEPTIONS){
        throw new Exception("Maximum ammount of exceptions caught.");
    }
    all_exceptions.add(e);
    Token t;
    do{
        t = getNextToken();
    }while(t.kind != kind);
}